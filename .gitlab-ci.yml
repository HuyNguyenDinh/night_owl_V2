# This example is for testing Django with MySQL.
#
# The test CI/CD variables MYSQL_DB, MYSQL_USER and MYSQL_PASS can be set in the project settings at:
#     Settings --> CI/CD --> Variables
#

variables:
  # DJANGO_CONFIG: "test"
  POSTGRES_DB: night_owl
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  DB_HOST: postgres
  DB_NAME: night_owl
  DB_USER: postgres
  DB_PASSWORD: postgres
  DB_PORT: 5432
  BROKER: redis
  REDIS_A: redis
  
default:
  image: python:3.10
  #
  # Pick zero or more services to be used on all builds.
  # Only needed when using a docker container to run your tests in.
  # Check out: https://docs.gitlab.com/ee/ci/services/index.html
  services:
    - postgres:latest
    - redis:latest
  #
  # This folder is cached between builds
  # http://docs.gitlab.com/ee/ci/yaml/README.html#cache
  cache:
    paths:
      - ~/.cache/pip/

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
  paths:
  - ~/.cache/pip/


# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres

# To get Django tests to work you may need to create a settings file using
# the following DATABASES:
# 
# DATABASES = {
#     'default': {
#        'ENGINE': 'django.db.backends.postgresql_psycopg2',
#        'NAME': 'ci',
#        'USER': 'postgres',
#        'PASSWORD': 'postgres',
#        'HOST': 'postgres',
#        'PORT': '5432',
#    },
# }
#
# and then adding `--settings app.settings.ci` (or similar) to the test command

test:
  before_script:
    - pip install -r requirements.txt
    - python manage.py makemigrations && python manage.py migrate
  script:
  - coverage run --source="." manage.py test --parallel --noinput
