# image: python:3.10
# services:
#   - name: postgres
#     alias: postgres
#   - name: redis:latest
#     alias: redis

# variables:
#   POSTGRES_DB: "night_owl"
#   POSTGRES_USER: "postgres"
#   POSTGRES_PASSWORD: "postgres"
#   POSTGRES_HOST_AUTH_METHOD: trust
#   PGDATA: "/var/lib/postgresql/data"
#   DB_HOST: postgres
#   DB_NAME: night_owl
#   DB_USER: postgres
#   DB_PASSWORD: postgres
#   DB_PORT: 5432
#   BROKER: redis
#   PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache"

# cache:
#   key:
#     files:
#       - requirements.txt
#   untracked: true
#   paths:
#     - .cache/
#     - venv/

# migrations:
#   stage: build
#   before_script:
#     - python -V
#     - apt-get update && apt-get install -y -q --no-install-recommends build-essential libpq-dev
#     - pip install virtualenv
#     - python -m venv venv
#     - source venv/bin/activate
#     - pip install -r requirements.txt
#   script:
#     - python manage.py makemigrations
#     - python manage.py migrate
#     - echo "Setup completed"

# test:
#   stage: test
#   before_script:
#     - source venv/bin/activate
#   script:
#     - echo "Hello, $GITLAB_USER_LOGIN!"
#     - python -m coverage run --source="." manage.py test -r --parallel
#     - python -m coverage json
# deploy:
#   stage: deploy
#   before_script:
#     ##
#     ## Install ssh-agent if not already installed, it is required by Docker.
#     ## (change apt-get to yum if you use an RPM-based image)
#     ##
#     - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'

#     ##
#     ## Run ssh-agent (inside the build environment)
#     ##
#     - eval $(ssh-agent -s)

#     ##
#     ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
#     ## We're using tr to fix line endings which makes ed25519 keys work
#     ## without extra base64 encoding.
#     ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
#     ##
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

#     ##
#     ## Create the SSH directory and give it the right permissions
#     ##
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     - source venv/bin/activate
#   script:
#     - echo "Run staging"
#     - python manange.py runserver -b 0.0.0.0 -p 80 night_owl_market.asgi:application
#   environment: staging

##################### ------------------------ ############################

#build_job:
#  stage: build
#  script:
#    - echo "Building..."
#    - echo "Build success"
#test_job_api:
#  stage: test
#  needs: [build_job]
#  rules:
#    - if: $CI_PIPELINE_SOURCE == "api"
#  script:
#    - echo "Run api job"
#test_job_push:
#  stage: test
#  needs: [build_job]
#  rules:
#    - if: $CI_PIPELINE_SOURCE == "push"
#  script:
#    - echo "Run push job"
#test_job_merge:
#  stage: test
#  needs: [build_job]
#  rules:
#    - if: $CI_PIPELINE_SOURCE == "merge"
#  script:
#    - echo "Run merge job"
#test_job_manual:
#  stage: test
#  needs: [build_job]
#  rules:
#    - if: $CI_PIPELINE_SOURCE == "manual"
#  script:
#    - echo "Run manual job"
#test_job_schedule:
#  stage: test
#  needs: [build_job]
#  rules:
#    - if: $CI_PIPELINE_SOURCE == "schedule"
#  script:
#    - echo "Run schedule job"
#test_job_web:
#  stage: test
#  needs: [build_job]
#  rules:
#    - if: $CI_PIPELINE_SOURCE == "web"
#  script:
#    - echo "Run web job"
#test_job_trigger:
#  stage: test
#  needs: [build_job]
#  rules:
#    - if: $CI_PIPELINE_SOURCE == "trigger"
#  script:
#    - echo "Run trigger job"
#deploy_job:
#  stage: deploy
#  script:
#    - echo "Deploying..."
#    - echo "Deploy success"