version: '3.5'

services:
  db:
    image: 'postgres:latest'
    restart: always
    # Optional: Map the container port to a host port to be able to connect with a local db client
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=night_owl
    volumes:
      - ./sql/psql-init:/docker-entrypoint-initdb.d
      - night_owl_postgres_data:/var/lib/postgresql/data/
    networks:
      - backend
  redis_a: &default_redis
    image: redis:latest
    networks:
      - backend
#  redis_b:
#    <<: *default_redis
#  redis_c:
#    << : *default_redis
  app_a: &default-app
    build:
      context: ../
      dockerfile: docker/app/Dockerfile
    container_name: app_A
    restart: always
    depends_on:
      - db
      - redis_a
#      - redis_b
#      - redis_c
    env_file:
      - .env
    environment: &app_environ
      - DB_HOST=db
      - DB_NAME=night_owl
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_PORT=5432
      - BROKER=redis_a
      - REDIS_A=redis_a
#      - REDIS_B=redis_b
#      - REDIS_C=redis_c
    networks:
      - backend
    volumes:
      - ../:/home/web/code
      - night_owl_static_volume:/home/web/code/staticfiles
    command: bash -c "python manage.py migrate && python -m daphne -b 0.0.0.0 -p 8000 night_owl_market.asgi:application"
#  app_b:
#    <<: *default-app
#    container_name: app_B
#  app_c:
#    <<: *default-app
#    container_name: app_C
#  celery_worker_a: &default_worker
#    build:
#      context: ../
#      dockerfile: docker/app/Dockerfile
#    container_name: celery_worker_a
#    volumes:
#      - ../:/home/web/code
#    depends_on:
#      - db
#      - redis_a
#      - app_a
#      - app_b
#      - app_c
#    env_file:
#      - .env
#    environment: *app_environ
#    command: celery -A night_owl_market worker --pool=threads -l INFO -Q msg_to_db -n worker --concurrency=16
#  celery_worker_b:
#    <<: *default_worker
#    container_name: celery_worker_b
#    command: celery -A night_owl_market worker --pool=prefork -l INFO -Q msg_to_group -n worker_b --concurrency=16
#  celery_worker_a1:
#    <<: *default_worker
#    container_name: celery_worker_a1
#    command: celery -A night_owl_market worker --pool=threads -l INFO -Q msg_to_db -n worker_a1 --concurrency=16
#  celery_worker_b1:
#    <<: *default_worker
#    container_name: celery_worker_b1
#    command: celery -A night_owl_market worker --pool=prefork -l INFO -Q msg_to_group -n worker_b1 --concurrency=16
#  haproxy:
#    build:
#      context: ..
#      dockerfile: docker/haproxy/Dockerfile
#    container_name: haproxy
#    ports:
#      - "80:80"
#    environment:
#      - APP_SCALE_A=app_a
#      - APP_SCALE_B=app_b
#      - APP_SCALE_C=app_c
#    depends_on:
#      - app_a
#      - app_b
#      - app_c
#    volumes:
#      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
volumes:
  night_owl_postgres_data:
  night_owl_static_volume:
networks:
  backend:
    name: night-owl-be